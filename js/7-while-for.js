// 7 тема - js (Циклы)

// 1. Цикл for

// Цикл for:

// Выражение for создаёт цикл, состоящий из 3 необязательных выражений в круглых скобках, разделённых точками с запятой.

// for (начало; условие работы цикла; шаг) {
//     // ... тело цикла ...
//   }
console.log('begin');
for (let index = 5; index < 10; index++) {
    // Проверка условия index < 10

    // тело цикла
    console.log('test');

    // index++;
}
console.log('end');



// цикл while:

// while (condition) {
//     код
//     также называемый "телом цикла"
//   }

// Код из тела цикла выполняется, пока условие истинно.

// Например, цикл ниже выводит i, пока i < 3:

// let i = 0;
// while (i < 3) { // выводит 0, затем 1, затем 2
//   alert( i );
//   i++;
// }



// 2. Что такое debugger? + -

// Выполнение кода можно также приостановить с помощью команды debugger прямо изнутри самого кода:

// function hello(name) {
//     let phrase = `Привет, ${name}!`;

//     debugger;  // <-- тут отладчик остановится

//     say(phrase);
// }

// При вызове отладчика выполнение скрипта приостановится в том месте, где находится выражение debugger, что равноценно действию установленных в скрипте точек останова.



// 3. Цикл с предусловием -

// Цикл с предусловием — цикл, который выполняется, пока истинно некоторое условие, указанное перед его началом. Это условие проверяется до выполнения тела цикла, поэтому тело может быть не выполнено ни разу (если условие с самого начала ложно). В большинстве процедурных языков программирования реализуется оператором while, отсюда его второе название — while-цикл.



// 4. Цикл с постусловием -

// Цикл с постусловием — цикл, в котором условие проверяется после выполнения тела цикла. Отсюда следует, что тело всегда выполняется хотя бы один раз.


// 5. Вложенные циклы +-

// Циклы, работу с которыми вы уже знаете, можно вкладывать друг в друга. К примеру, давайте решим следующую задачу: выведем на экран строку:

// 111222333444555666777888999

// Тут одним циклом не обойтись - нужно запустить два вложенных друг в друга цикла: первый цикл будет перебирать числа (сначала 1, потом 2, потом 3 и так до 9), а второй цикл будет повторять эти числа 3 раза.

// Давайте реализуем:

// for (let i = 1; i <= 9; i++) {
//     for (let j = 1; j <= 3; j++) {
//         console.log(i);
//     }
// }

// Обратите внимание: первый цикл имеет счетчик i, второй j, а если будет еще и третий цикл - то у него счетчиком будет переменная k. Это стандартные общепринятые названия, следует пользоваться именно ими.


// 6. Бесконечные циклы (for, while), как сделать? +

// for (;;) {
//     // будет выполняться вечно
//   }

// условие цикла всегда должно быть истинным
// while(true) {
//     console.log('Hello')
//   }



// 7. Как остановить бесконечный цикл? (break) -

// Обычно цикл завершается при вычислении условия в false.
// Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.



// 8. Как пропустить итерацию цикла (continue) +

// Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).

// Её используют, если понятно, что на текущем повторе цикла делать больше нечего.

// Например, цикл ниже использует continue, чтобы выводить только нечётные значения:

// for (let i = 0; i < 10; i++) {
//     //если true, пропустить оставшуюся часть тела цикла
//     if (i % 2 == 0) continue;

//     alert(i); // 1, затем 3, 5, 7, 9
// }